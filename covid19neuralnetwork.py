# -*- coding: utf-8 -*-
"""covid19neuralnetwork

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m5qRVr_NBk0xb79bOcDRqBfRhzq-WQ2u
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/4193481_268769092_covidhospitalizationsample.csv')
df = df.replace(np.nan,0)
df.head(5)

df.shape

df.describe()

df.groupby(['SARS-Cov-2 exam result']).count()

labels = df['SARS-Cov-2 exam result']
features = df.drop(columns=['SARS-Cov-2 exam result'])

labels[0:5]

features[0:5]

labels.replace('positive',0, inplace=True)
labels.replace('negative',1, inplace=True)
labels[0:5]

features = pd.get_dummies(features)
features[0:5]

features_train,features_test,labels_train,labels_test = train_test_split(features,labels,test_size=0.2)
features_train,features_validation,labels_train,labels_validation = train_test_split(features_train,labels_train,test_size=0.2)

model = keras.Sequential([keras.layers.Dense(32,input_shape=(0,1404)),keras.layers.Dense(20,activation=tf.nn.relu),
                          keras.layers.Dense(2,activation='softmax')])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['acc'])

history = model.fit(features_train,labels_train,epochs=20,validation_data=(features_validation,labels_validation))

prediction_features = model.predict(features_test)
performance = model.evaluate(features_test,labels_test)
print(performance)

from sklearn.metrics import roc_curve, auc
fpr2, tpr2, threshold = roc_curve(labels_test, model.predict_proba(features_test)[:,1])
plt.plot([0,1],[0,1])
plt.plot(fpr2,tpr2,label='Neural Network')
plt.xlabel('False Positive Rate')
plt.ylabel('True positive Rate')
plt.title('Neural Network')
plt.show()

history_dict = history.history
history_dict.keys()

acc = history_dict['acc']
val_acc = history_dict['val_acc']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs,loss,'bo',label='Training loss')

plt.plot(epochs,loss,'b',label='Validation loss')

plt.title('training and validation Loss')

plt.xlabel('Epochs')

plt.ylabel('Loss')

plt.legend()

plt.show()

# Tuning Hyperparameters
import numpy as np
from sklearn.model_selection import GridSearchCV
from keras.wrappers.scikit_learn import KerasClassifier

def create_model(init_mode='uniform'):
    # define model
    model = keras.Sequential()
    model.add(keras.layers.Dense(64, kernel_initializer=init_mode,input_dim=1404)) 
    # model.add(keras.layers.Dropout(0.1))
    model.add(keras.layers.Dense(64, kernel_initializer=init_mode, activation=tf.nn.relu))
    model.add(keras.layers.Dense(10, kernel_initializer=init_mode, activation=tf.nn.softmax))
    # compile model
    # model.compile(loss='categorical_crossentropy',
    #           optimizer=keras.optimizers.RMSprop(),
    #           metrics=['accuracy'])
    model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['acc'])
    return model

# Commented out IPython magic to ensure Python compatibility.
# %%time
# seed = 7
# np.random.seed(seed)
# batch_size = 128
# epochs = 30
# 
# model_CV = KerasClassifier(build_fn=create_model, epochs=epochs, 
#                            batch_size=batch_size, verbose=1)
# # define the grid search parameters
# init_mode = ['uniform', 'lecun_uniform', 'normal', 'zero', 
#              'glorot_normal', 'glorot_uniform', 'he_normal', 'he_uniform']
# 
# param_grid = dict(init_mode=init_mode)
# grid = GridSearchCV(estimator=model_CV, param_grid=param_grid, n_jobs=-1, cv=3)
# grid_result = grid.fit(features_train, labels_train)

grid_result.best_params_
grid_result.best_score_

from sklearn.metrics import roc_curve, auc
fpr2, tpr2, threshold = roc_curve(labels_test, grid.predict_proba(features_test)[:,1])
plt.plot([0,1],[0,1])
plt.plot(fpr2,tpr2,label='Neural Network')
plt.xlabel('False Positive Rate')
plt.ylabel('True positive Rate')
plt.title('Neural network with GridSearchCv Curve')
plt.show()

from sklearn.tree import DecisionTreeClassifier

param_grid = {'max_depth':np.arange(1,50)}
tree = DecisionTreeClassifier()
tree_cv = GridSearchCV(tree,param_grid,cv=5)
tree_cv.fit(features_train,labels_train)
tree_cv.best_params_
tree_cv.best_score_

from sklearn.metrics import roc_curve, auc
fpr2, tpr2, threshold = roc_curve(labels_test, tree_cv.predict_proba(features_test)[:,1])
plt.plot([0,1],[0,1])
plt.plot(fpr2,tpr2,label='Decision Tree')
plt.xlabel('False Positive Rate')
plt.ylabel('True positive Rate')
plt.title('Decision Tree Rock curve')
plt.show()